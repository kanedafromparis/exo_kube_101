apiVersion: v1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    labels:
      color: red
      run: nginx001
      status: prod
    name: nginx001
    namespace: projet-011
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        run: nginx001
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          run: nginx001
          color: red
          status: prod
      spec:
        containers:
        - image: kanedafromparis/nginx:0.3
          imagePullPolicy: IfNotPresent
          name: nginx001
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 5
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    labels:
      color: green
      run: nginx002
      status: dev
    name: nginx002
    namespace: projet-012
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        run: nginx002
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          color: green
          run: nginx002
          status: dev
      spec:
        containers:
        - image: kanedafromparis/nginx:0.1
          imagePullPolicy: IfNotPresent
          name: nginx002
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 5
- apiVersion: v1
  kind: Namespace
  metadata:
    name: projet-011
- apiVersion: v1
  kind: Namespace
  metadata:
    name: projet-012
- apiVersion: v1
  kind: Namespace
  metadata:
    name: projet-013
- apiVersion: v1
  kind: Namespace
  metadata:
    name: projet-014
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    labels:
      color: red
      run: nginx003
    name: nginx003
    namespace: projet-014
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        run: nginx003
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          color: red
          run: nginx003
      spec:
        containers:
        - image: kanedafromparis/nginx:0.1
          imagePullPolicy: IfNotPresent
          name: nginx003
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 5
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    labels:
      color: green
      run: nginx004
      status: prod
    name: nginx004
    namespace: projet-014
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        run: nginx004
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          color: green
          run: nginx004
          status: prod
      spec:
        containers:
        - image: kanedafromparis/nginx:0.1
          imagePullPolicy: IfNotPresent
          name: nginx004
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 5
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    labels:
      color: green
      run: nginx005
      status: dev
    name: nginx005
    namespace: projet-014
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        run: nginx005
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          color: green
          run: nginx005
          status: dev
      spec:
        containers:
        - image: kanedafromparis/nginx:0.1
          imagePullPolicy: IfNotPresent
          name: nginx005
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 5
